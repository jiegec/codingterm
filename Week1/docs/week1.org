#+AUTHOR: 计72 陈嘉杰
#+TITLE: Qt 大作业 微液滴芯片设计及可视化
* 题目说明
对芯片的结构进行可视化，允许用户通过界面上的多种方式配置芯片的大小、各条边的宽度、输入输出端口的位置等参数，同时通过执行冀助教的替代 COMSOL 算法的建议实现，给出各个边和输出端口的流速参数，并通过各边的颜色渐变和箭头方向进行可视化。作为扩展要求，提供了鼠标拖拽修改边的宽度的交互方式，另外实现了浓度的计算和通过遗传算法修改网络结构使得输出端口的流速和所需的参数尽量接近的功能。


* 实现思路
通过给 ~QWidget~ 实现一个子类 ~Chip~ ，并且覆盖了 ~paintEvent()~ 方法，手动绘制了芯片，包括打开/关闭状态，通过颜色渐变可视化浓度/流速，并画出这条边的流向。通过灵活运用 ~QPainter::translate()~ 和 ~QPainter::rotate()~ 等方法，只需要编写画一条竖直边的代码，就可以复用到其它竖直边和水平边上，减少了代码的重复和错误的可能性。同时，覆盖了 ~mousePressEvent()~ ~mouseMoveEvent()~ 和 ~mouseReleaseEvent()~ 方法并打开 ~setMouseTracking(true)~ ，获取到所有鼠标事件后自行处理，包括坐标计算，即根据鼠标所在位置，判断光标下是哪条边，是在这条边的中部还是边界。如果是中部，则更改光标形状，对输入输出端口，提示用户可以拖拽以更改位置；对网格中的边，提示用户可以单击中部以打开/关闭这条边。如果是边界，则更改光标形状，提示用户可以通过拖拽来改变这条边的宽度，并跟踪鼠标的按下/松开状态以实现实时的拖拽效果。进一步还可以使用定时器实现双击的支持，即双击某条边时弹出窗口来精确调整这条边的一些参数，弥补鼠标操控精确度的不足。另外，实现了提示消息框和状态栏的更新，实时反馈当前的状态并提示用户。为了界面操控的流畅，采用了异步更新界面的方法，即创建一个工作线程用于执行算法，界面一经更改，发送消息通知工作线程进行计算，计算完毕后通知界面线程对界面进行更新，并且适当上锁。为了通过遗传算法进行网络结构的自动拟合，同样开了一个新的工作线程进行遗传算法的计算，同时在每次有更优解出现时及时更新到界面上，使得用户在等待算法优化的同时可以看到实时的进度。为了满足大作业考察对话框和菜单栏的要求，实现了 ~SettingsDialog~ 子类，并加入到了菜单栏中。

* 程序编译环境
1. 操作系统： macOS
2. 编译器： LLVM/Clang 6.0.1
3. 依赖：Qt 5.11.1

* 实现细节
** MainWindow 类
这个类显示主界面，界面通过 Qt Designer 绘制而成并通过 UIC 生成代码。此外，信号和槽的连接都尽量在 .ui 文件中实现。此外，简单维护了边长等参数，实现了语言的切换功能，并且给 ~Chip~ 类提供了更新消息和状态栏的方法。
** Chip 类
实现最复杂的部分。主要分为以下几个部分：
*** 绘图部分
通过覆盖 ~paintEvent()~ 方法，使用 ~QPainter~ 进行绘制。根据当前的状态，决定每一条边应该如何画。同时，为了适应不同宽度，在绘制边的时候，采用了三个长方形加四个四分之一椭圆组合的方式。但仍然不够理想，进一步可能需要采用贝塞尔曲线等方法进行绘制。
*** 鼠标跟踪部分
对鼠标事件进行判断，同时维护当前的鼠标状态，并且根据鼠标下边的边的类型不同提供不同的行为。
*** 自动芯片设计部分
通过 ~MainWindow~ 传来的参数，新开一个工作线程执行遗传算法，并且把新的最优解显示到界面上。
*** 执行计算部分
每当芯片的结构更改时，通知 ~Worker~ 进行计算，然后接受 ~Worker~ 获取的新结果显示到界面上。
** Worker 类
通过 ~calculate()~ 信号开始执行算法进行计算，并通过 ~finish(QVector<double>)~ 槽把计算结果返回到界面线程。由于在创建 ~Worker~ 的时候将其分配到一个单独的线程中去，所以计算的时候不会阻塞界面线程。
** 算法
基于冀助教提供的样例代码，进行了一些更改：当输入端口和输出端口不相连时，做好检查；添加了浓度计算的算法；添加了返回各条边方向和流速的功能。此外也重写了高斯全选主元消元法。

* 遇到的问题和得到的收获
遇到的问题主要就是审题不仔细，对题目的一些简单的硬性要求没有仔细阅读。
